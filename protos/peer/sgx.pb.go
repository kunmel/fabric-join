// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/sgx.proto

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NewTxRequest struct {
	TxID         string     `protobuf:"bytes,1,opt,name=TxID" json:"TxID,omitempty"`
	OnChainData  []*DataMap `protobuf:"bytes,2,rep,name=OnChainData" json:"OnChainData,omitempty"`
	OffChainData string     `protobuf:"bytes,3,opt,name=OffChainData" json:"OffChainData,omitempty"`
	WorkLoad     string     `protobuf:"bytes,4,opt,name=WorkLoad" json:"WorkLoad,omitempty"`
}

func (m *NewTxRequest) Reset()                    { *m = NewTxRequest{} }
func (m *NewTxRequest) String() string            { return proto.CompactTextString(m) }
func (*NewTxRequest) ProtoMessage()               {}
func (*NewTxRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *NewTxRequest) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *NewTxRequest) GetOnChainData() []*DataMap {
	if m != nil {
		return m.OnChainData
	}
	return nil
}

func (m *NewTxRequest) GetOffChainData() string {
	if m != nil {
		return m.OffChainData
	}
	return ""
}

func (m *NewTxRequest) GetWorkLoad() string {
	if m != nil {
		return m.WorkLoad
	}
	return ""
}

type DataMap struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *DataMap) Reset()                    { *m = DataMap{} }
func (m *DataMap) String() string            { return proto.CompactTextString(m) }
func (*DataMap) ProtoMessage()               {}
func (*DataMap) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *DataMap) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DataMap) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SimulateResult struct {
	TxID     string              `protobuf:"bytes,1,opt,name=TxID" json:"TxID,omitempty"`
	WriteSet []*SimulateWriteSet `protobuf:"bytes,2,rep,name=WriteSet" json:"WriteSet,omitempty"`
}

func (m *SimulateResult) Reset()                    { *m = SimulateResult{} }
func (m *SimulateResult) String() string            { return proto.CompactTextString(m) }
func (*SimulateResult) ProtoMessage()               {}
func (*SimulateResult) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *SimulateResult) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *SimulateResult) GetWriteSet() []*SimulateWriteSet {
	if m != nil {
		return m.WriteSet
	}
	return nil
}

type SimulateWriteSet struct {
	Key      string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	IsDelete bool   `protobuf:"varint,2,opt,name=IsDelete" json:"IsDelete,omitempty"`
	Value    []byte `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *SimulateWriteSet) Reset()                    { *m = SimulateWriteSet{} }
func (m *SimulateWriteSet) String() string            { return proto.CompactTextString(m) }
func (*SimulateWriteSet) ProtoMessage()               {}
func (*SimulateWriteSet) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

func (m *SimulateWriteSet) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SimulateWriteSet) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

func (m *SimulateWriteSet) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type TestMsg struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *TestMsg) Reset()                    { *m = TestMsg{} }
func (m *TestMsg) String() string            { return proto.CompactTextString(m) }
func (*TestMsg) ProtoMessage()               {}
func (*TestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

func (m *TestMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type TestRsp struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *TestRsp) Reset()                    { *m = TestRsp{} }
func (m *TestRsp) String() string            { return proto.CompactTextString(m) }
func (*TestRsp) ProtoMessage()               {}
func (*TestRsp) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{5} }

func (m *TestRsp) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*NewTxRequest)(nil), "protos.NewTxRequest")
	proto.RegisterType((*DataMap)(nil), "protos.DataMap")
	proto.RegisterType((*SimulateResult)(nil), "protos.SimulateResult")
	proto.RegisterType((*SimulateWriteSet)(nil), "protos.SimulateWriteSet")
	proto.RegisterType((*TestMsg)(nil), "protos.TestMsg")
	proto.RegisterType((*TestRsp)(nil), "protos.TestRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SgxService service

type SgxServiceClient interface {
	SubmitTx(ctx context.Context, opts ...grpc.CallOption) (SgxService_SubmitTxClient, error)
	NewSgxTx(ctx context.Context, in *NewTxRequest, opts ...grpc.CallOption) (SgxService_NewSgxTxClient, error)
	GrpcTest(ctx context.Context, in *TestMsg, opts ...grpc.CallOption) (SgxService_GrpcTestClient, error)
}

type sgxServiceClient struct {
	cc *grpc.ClientConn
}

func NewSgxServiceClient(cc *grpc.ClientConn) SgxServiceClient {
	return &sgxServiceClient{cc}
}

func (c *sgxServiceClient) SubmitTx(ctx context.Context, opts ...grpc.CallOption) (SgxService_SubmitTxClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SgxService_serviceDesc.Streams[0], c.cc, "/protos.SgxService/SubmitTx", opts...)
	if err != nil {
		return nil, err
	}
	x := &sgxServiceSubmitTxClient{stream}
	return x, nil
}

type SgxService_SubmitTxClient interface {
	Send(*NewTxRequest) error
	Recv() (*SimulateResult, error)
	grpc.ClientStream
}

type sgxServiceSubmitTxClient struct {
	grpc.ClientStream
}

func (x *sgxServiceSubmitTxClient) Send(m *NewTxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sgxServiceSubmitTxClient) Recv() (*SimulateResult, error) {
	m := new(SimulateResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sgxServiceClient) NewSgxTx(ctx context.Context, in *NewTxRequest, opts ...grpc.CallOption) (SgxService_NewSgxTxClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SgxService_serviceDesc.Streams[1], c.cc, "/protos.SgxService/NewSgxTx", opts...)
	if err != nil {
		return nil, err
	}
	x := &sgxServiceNewSgxTxClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SgxService_NewSgxTxClient interface {
	Recv() (*SimulateResult, error)
	grpc.ClientStream
}

type sgxServiceNewSgxTxClient struct {
	grpc.ClientStream
}

func (x *sgxServiceNewSgxTxClient) Recv() (*SimulateResult, error) {
	m := new(SimulateResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sgxServiceClient) GrpcTest(ctx context.Context, in *TestMsg, opts ...grpc.CallOption) (SgxService_GrpcTestClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SgxService_serviceDesc.Streams[2], c.cc, "/protos.SgxService/GrpcTest", opts...)
	if err != nil {
		return nil, err
	}
	x := &sgxServiceGrpcTestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SgxService_GrpcTestClient interface {
	Recv() (*TestRsp, error)
	grpc.ClientStream
}

type sgxServiceGrpcTestClient struct {
	grpc.ClientStream
}

func (x *sgxServiceGrpcTestClient) Recv() (*TestRsp, error) {
	m := new(TestRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SgxService service

type SgxServiceServer interface {
	SubmitTx(SgxService_SubmitTxServer) error
	NewSgxTx(*NewTxRequest, SgxService_NewSgxTxServer) error
	GrpcTest(*TestMsg, SgxService_GrpcTestServer) error
}

func RegisterSgxServiceServer(s *grpc.Server, srv SgxServiceServer) {
	s.RegisterService(&_SgxService_serviceDesc, srv)
}

func _SgxService_SubmitTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SgxServiceServer).SubmitTx(&sgxServiceSubmitTxServer{stream})
}

type SgxService_SubmitTxServer interface {
	Send(*SimulateResult) error
	Recv() (*NewTxRequest, error)
	grpc.ServerStream
}

type sgxServiceSubmitTxServer struct {
	grpc.ServerStream
}

func (x *sgxServiceSubmitTxServer) Send(m *SimulateResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sgxServiceSubmitTxServer) Recv() (*NewTxRequest, error) {
	m := new(NewTxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SgxService_NewSgxTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewTxRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SgxServiceServer).NewSgxTx(m, &sgxServiceNewSgxTxServer{stream})
}

type SgxService_NewSgxTxServer interface {
	Send(*SimulateResult) error
	grpc.ServerStream
}

type sgxServiceNewSgxTxServer struct {
	grpc.ServerStream
}

func (x *sgxServiceNewSgxTxServer) Send(m *SimulateResult) error {
	return x.ServerStream.SendMsg(m)
}

func _SgxService_GrpcTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SgxServiceServer).GrpcTest(m, &sgxServiceGrpcTestServer{stream})
}

type SgxService_GrpcTestServer interface {
	Send(*TestRsp) error
	grpc.ServerStream
}

type sgxServiceGrpcTestServer struct {
	grpc.ServerStream
}

func (x *sgxServiceGrpcTestServer) Send(m *TestRsp) error {
	return x.ServerStream.SendMsg(m)
}

var _SgxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.SgxService",
	HandlerType: (*SgxServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubmitTx",
			Handler:       _SgxService_SubmitTx_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewSgxTx",
			Handler:       _SgxService_NewSgxTx_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GrpcTest",
			Handler:       _SgxService_GrpcTest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "peer/sgx.proto",
}

func init() { proto.RegisterFile("peer/sgx.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x6b, 0xdb, 0x40,
	0x10, 0xed, 0xc6, 0x69, 0xad, 0x4e, 0x4c, 0x1a, 0x96, 0x50, 0x84, 0x4e, 0x61, 0x7b, 0x71, 0x29,
	0x58, 0x4e, 0x5a, 0xe8, 0xa5, 0xf4, 0xd0, 0x1a, 0x4a, 0xa0, 0x49, 0x60, 0x25, 0x12, 0xc8, 0x6d,
	0xa5, 0x8c, 0x65, 0x11, 0x7d, 0x75, 0x77, 0x95, 0xc8, 0x3f, 0xa4, 0xff, 0xa6, 0x3f, 0xae, 0xac,
	0x56, 0x52, 0x6d, 0xe3, 0x4b, 0x4f, 0x3b, 0x6f, 0x66, 0xde, 0xf0, 0xde, 0xec, 0xc0, 0x71, 0x85,
	0x28, 0x7d, 0x95, 0x34, 0xb3, 0x4a, 0x96, 0xba, 0xa4, 0xaf, 0xda, 0x47, 0xb1, 0xdf, 0x04, 0x26,
	0xd7, 0xf8, 0x1c, 0x36, 0x1c, 0x7f, 0xd5, 0xa8, 0x34, 0xa5, 0x70, 0x18, 0x36, 0x97, 0x0b, 0x97,
	0x9c, 0x91, 0xe9, 0x6b, 0xde, 0xc6, 0xf4, 0x1c, 0x8e, 0x6e, 0x8a, 0xef, 0x2b, 0x91, 0x16, 0x0b,
	0xa1, 0x85, 0x7b, 0x70, 0x36, 0x9a, 0x1e, 0x5d, 0xbc, 0xb1, 0x93, 0xd4, 0xcc, 0xe4, 0xae, 0x44,
	0xc5, 0x37, 0x7b, 0x28, 0x83, 0xc9, 0xcd, 0x72, 0xf9, 0x8f, 0x33, 0x6a, 0xc7, 0x6d, 0xe5, 0xa8,
	0x07, 0xce, 0x5d, 0x29, 0x1f, 0x7f, 0x96, 0xe2, 0xc1, 0x3d, 0x6c, 0xeb, 0x03, 0x66, 0xe7, 0x30,
	0xee, 0xe6, 0xd2, 0x13, 0x18, 0x3d, 0xe2, 0xba, 0x13, 0x64, 0x42, 0x7a, 0x0a, 0x2f, 0x9f, 0x44,
	0x56, 0xa3, 0x7b, 0xd0, 0xe6, 0x2c, 0x60, 0xf7, 0x70, 0x1c, 0xa4, 0x79, 0x9d, 0x09, 0x8d, 0x1c,
	0x55, 0x9d, 0xed, 0xf7, 0xf2, 0x09, 0x9c, 0x3b, 0x99, 0x6a, 0x0c, 0x50, 0x77, 0x46, 0xdc, 0xde,
	0x48, 0xcf, 0xee, 0xeb, 0x7c, 0xe8, 0x64, 0xb7, 0x70, 0xb2, 0x5b, 0xdd, 0xa3, 0xcb, 0x03, 0xe7,
	0x52, 0x2d, 0x30, 0x43, 0x6d, 0xa5, 0x39, 0x7c, 0xc0, 0x46, 0xf3, 0x6d, 0xab, 0xd9, 0x6c, 0x62,
	0xc2, 0x2d, 0x60, 0x9f, 0x61, 0x1c, 0xa2, 0xd2, 0x57, 0x2a, 0x31, 0x62, 0x0b, 0x91, 0x63, 0x2f,
	0xd6, 0xc4, 0xd4, 0x85, 0x71, 0x5c, 0x16, 0x1a, 0x0b, 0xdd, 0x59, 0xed, 0x21, 0x7b, 0x67, 0x89,
	0x5c, 0x55, 0x9b, 0x4d, 0x64, 0xab, 0xe9, 0xe2, 0x0f, 0x01, 0x08, 0x92, 0x26, 0x40, 0xf9, 0x94,
	0xc6, 0x48, 0xbf, 0x82, 0x13, 0xd4, 0x51, 0x9e, 0xea, 0xb0, 0xa1, 0xa7, 0xbd, 0xe9, 0xcd, 0xcf,
	0xf7, 0xde, 0xee, 0xae, 0xc2, 0x2e, 0x92, 0xbd, 0x98, 0x92, 0x39, 0xa1, 0x5f, 0xc0, 0xb9, 0xc6,
	0xe7, 0x20, 0x69, 0xfe, 0x9f, 0x3f, 0x27, 0x74, 0x0e, 0xce, 0x0f, 0x59, 0xc5, 0x46, 0x35, 0x1d,
	0x6e, 0xa7, 0x33, 0xef, 0x6d, 0x25, 0xb8, 0xaa, 0x0c, 0xe3, 0xdb, 0x87, 0xfb, 0xf7, 0x49, 0xaa,
	0x57, 0x75, 0x34, 0x8b, 0xcb, 0xdc, 0x5f, 0xad, 0x2b, 0x94, 0x19, 0x3e, 0x24, 0x28, 0xfd, 0xa5,
	0x88, 0x64, 0x1a, 0xfb, 0x96, 0xe3, 0x9b, 0xd3, 0x8e, 0xec, 0x41, 0x7f, 0xfc, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x2a, 0x3b, 0xcc, 0x5e, 0xe9, 0x02, 0x00, 0x00,
}
